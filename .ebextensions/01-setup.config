# The following script will deploy scriibi on AWS Elastic Beanstalk.
#DO NOT MESS WITH THIS FILE UNLESS YOU KNOW WHAT YOUR ARE DOING. YOU RISK DELETING THE ENTIRE DATABASE... OR WORSE. LOOK AWAY.
#DO NOT MESS WITH THIS FILE UNLESS YOU KNOW WHAT YOUR ARE DOING. YOU RISK DELETING THE ENTIRE DATABASE... OR WORSE. LOOK AWAY.
#DO NOT MESS WITH THIS FILE UNLESS YOU KNOW WHAT YOUR ARE DOING. YOU RISK DELETING THE ENTIRE DATABASE... OR WORSE. LOOK AWAY.
#DO NOT MESS WITH THIS FILE UNLESS YOU KNOW WHAT YOUR ARE DOING. YOU RISK DELETING THE ENTIRE DATABASE... OR WORSE. LOOK AWAY.
#DO NOT MESS WITH THIS FILE UNLESS YOU KNOW WHAT YOUR ARE DOING. YOU RISK DELETING THE ENTIRE DATABASE... OR WORSE. LOOK AWAY.
#DO NOT MESS WITH THIS FILE UNLESS YOU KNOW WHAT YOUR ARE DOING. YOU RISK DELETING THE ENTIRE DATABASE... OR WORSE. LOOK AWAY.

# -------------------------------- Commands ------------------------------------
# Use "commands" key to execute commands on the EC2 instance. The commands are
# processed in alphabetical order by name, and they run before the application
# and web server are set up and the application version file is extracted.
# ------------------------------------------------------------------------------

files:
#ensure server rewrites urls to match the app root directory.
    "/etc/httpd/conf.d/ssl_rewrite.conf":
        mode: "000644"
        owner: root
        group: root
        content: |
            RewriteEngine On

#force redirect to https
    "/etc/httpd/conf.d/http-redirect.conf":
        mode: "000644"
        owner: root
        group: root
        content: |
            RewriteEngine On
            RewriteCond %{HTTP:X-Forwarded-Proto} !https
            RewriteCond %{HTTP_USER_AGENT} !ELB-HealthChecker
            RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}

#run npm run prod after successful deployment
    "/opt/elasticbeanstalk/hooks/appdeploy/post/99_node.sh":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/bin/bash

            cd /var/app/current

            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash

            # Source nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

            # Install node
            nvm install 8.6.0

            npm i npm@latest && npm run prod

#change permissions to app/storage folder so laravel can write log files.
    "/opt/elasticbeanstalk/hooks/appdeploy/post/99_make_storage_writable.sh":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash
            chmod -R 775 /var/app/current/storage

commands:
#install nodejs
  01updateComposer:
    command: export COMPOSER_HOME=/root && /usr/bin/composer.phar self-update
  02downloadnodejs:
    command: "curl -sL https://rpm.nodesource.com/setup_8.x | bash -E -"
  03installnodejs:
    command: "sudo yum -y install nodejs"
  04turnswapOff:
    command: "swapoff -a"
  05createswapfile:
    command: "sudo fallocate -l 4G /swapfile"
  06enableswapfile:
    command: "sudo chmod 600 /swapfile"
  07setupSwapSpace:
    command: "sudo mkswap /swapfile"
  08turnOnSwap:
    command: "sudo swapon /swapfile"

option_settings:
  - namespace: aws:elasticbeanstalk:application:environment
    option_name: COMPOSER_HOME
    value: /root

  - namespace: aws:elasticbeanstalk:container:php:phpini
    option_name: memory_limit
    value: 512M



# ---------------------------- Container Commands ------------------------------
# You can use the container_commands key to execute commands for your container.
# The commands in container_commands are processed in alphabetical order by
# name. They run after the application and web server have been set up and the
# application version file has been extracted, but before the application
# version is deployed. They also have access to environment variables such as
# your AWS security credentials. Additionally, you can use leader_only. One
# instance is chosen to be the leader in an Auto Scaling group. If the
# leader_only value is set to true, the command runs only on the instance
# that is marked as the leader.
#
# Artisan commands include environment flag for production. If you are not
# deploying to a production environment, update the flag.
# ------------------------------------------------------------------------------

container_commands:

  01removeVendor:
    command: "rm -rf vendor/"
  02removeComposerLock:
    command: "rm -rf composer.lock"
  04installComposer:
    command: "php /opt/elasticbeanstalk/support/composer.phar install --prefer-dist"
  06clear_config_cache:
    command: "php artisan config:clear"
    leader_only: false
  07migrations:
    command: "php artisan migrate --force"
    leader_only: false




